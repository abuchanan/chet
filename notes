TODO

handle errors
- server timeouts
- invalid input (e.g. reference name)


dragging the offset so that elements are added/removed from the screen changes the height of the viewer.
ok, but might have effects on UX.  try to keep the viewer a reasonable height.
could also make the features jump around as the packing is changed.


what should the "add track" UI be like?


there might be a bug with svg mask/clip. for some reason it was acting strangely when applied to div.ruler, but it works fine on div.overview.  figure out if this is a bug and report it



https://groups.google.com/forum/#!msg/angular/tv4Nl1HouOw/i0MMmfkMrbUJ




organization
==============

start keeping a list of all the cool things i've worked with while working on chet
to be part of a blog post on the first released version on chet



big chunks
===========

search

server-side
- prefetching, caching, and efficient server communication

create instance

create track preset

add track with no preset, configure all details



code improvement
=================
proper injection to protect against minification munging

index.html is currently running with chet.dev.  obviously this shouldn't get checked in, and i need an easy way to switch between the two while avoiding accidental check-ins



far future
===========

users

per-user bookmarked locations. in-app bookmarking, not browser bookmarking.

instances are user specific?
- which means i need users?

sequence data

feature editor




testing
============
unit testing:  a terrible thing to have in a todo list


test odd positions
- start >= end
- end - start == 1



test out some actual data



----
UNIT/INTERFACE TESTING NOTES

when displaying a feature, the feature should not be drawn outside the bounds of the viewer.  same for end.

configure a condition where this happens:
- a feature
- a viewer

a good solution for this is CSS "overflow: hidden", which means this needs to be tested
at the browser level, with some way to perceive that it, in fact, doesn't show the overflowing feature.  sounds like comparing images.  that's tough.

this is an interesting case where the easily testable approach isn't the easiest (or best?) to implement.

-----

when features are no longer visible, their dom elements should be deleted.

in some cases, it might make sense to keep them around, if they are just outside the visible range.


----
OTHER



always namespace directives.  I spent an hour figuring out that <track> was buggy because it's an existing HTML tag
would be nice to have something that checks directives and warns about this


closing tags are important on directives



http://codereview.stackexchange.com/
http://jsfiddle.net/IgorMinar/ADukg/
http://jsfiddle.net/pkozlowski_opensource/hzxNa/1/



--------------
thoughts

chet is really just a UX upgrade from gbrowse.  i'm not inventing new features, or a new way to browse a genome, i'm really just making the UX nice and smooth.

some new features may come in the far future, such as easily walking through a list of locations, but for now i'm spending a lot of time working towards feature parity with gbrowse.

in most worlds, this wouldn't be a good argument for working on a project.  who care about UX?  at least no one in BPP.  and yet i think people will end up using chet, because the UX will be nice.  it just _looks_ nicer, and for me that's enough.

there are some peripheral benefits, such as reducing load on the server by drawing on the client, and decoupling the UI from the server code.  this is nice, but not the main goal of chet.

so, thought of the morning, chet is really just about upgrading the UX.  it doesn't seem like much when it's said that way.  can i add more value to this mission?

in the end, it's a side project, and it's been a very fun and challenging one, i've learned a ton, and i think people will actually use this, so having a strong sales pitch isn't needed, but it's good exercise to think about:  how would i sell this project?

what kind of value does the future of chet hold?  while it's starting out fulfulling the basic requirement of feature parity, i think there must be plenty of room for innovation in genome browsing.  google maps has a very nice UI for basic maps browsing, but it adds a ton of value in things like directions, search, street view, etc.  what kinds of features will be awesome innovations in genome browsing?

ideas:
- walking through a list of genes
- really great search
- notes at locations
- bookmarks
- connect to other analysis tools
- google maps has overlays like traffic, videos:  what overlays can i come up with?
