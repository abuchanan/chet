TODO


think about UI for drag-to-select. there may be multiple (and possibly pluggable) actions for drag-to-select, e.g. zooming to a region vs. dump selection to FASTA

coverage track zooming is buggy and probably completely incorrect
bugs in scrolling too: genes and coverage tracks move at different rates

refine overview design: doesn't need to have a lot of height

zoom levels and slider

keyboard shortcuts
- pan left/right
- zoom


track configuration

use strict

pluggable track type config


proper injection to protect against minification munging

a way to get available reference IDs and position bounds of a track/set of tracks


feedback interface.  allow users to submit feedback


instances are user specific?
- which means i need users?


draw actual features


integrate twitter's bootstrap css
loading inidicators

ruler

URLs for linking to specific locations
- instance location url

gene info popups/hover

bug: dragging selects label text

unit testing:  a terrible thing to have in a todo list


test odd positions
- start >= end
- end - start == 1


connect to server
prefetching


search

sequence data


drag to select

reference list


onblur instead of onkeypress for ref + start + end

draggable track order

track buttons

track config panel/pop-up

actual, configurable track labels

interactive coverage track: call out value of point nearest to cursor

feature editor

handle empty
- if there are no features, container collapses to zero.  should be a min height
- what if no tracks are shown?

handle errors
- server timeouts
- invalid input (e.g. reference name)

test out some actual data

window size detection and response

dragging the offset so that elements are added/removed from the screen changes the height of the viewer.
ok, but might have effects on UX.  try to keep the viewer a reasonable height.
could also make the features jump around as the packing is changed.


groups of isoforms.  probably handled already




zoom, or rather visible range: rough draft done

feature packing: rough draft done, needs extensive testing

multiple tracks: rough draft done

multiple chromosomes: rough draft done

drag to pan: rough, needs testing

multiple data sources: data source is inherent to URL

histogram (coverage) track: rough draft done

----
UNIT/INTERFACE TESTING NOTES

when displaying a feature, the feature should not be drawn outside the bounds of the viewer.  same for end.

configure a condition where this happens:
- a feature
- a viewer

a good solution for this is CSS "overflow: hidden", which means this needs to be tested
at the browser level, with some way to perceive that it, in fact, doesn't show the overflowing feature.  sounds like comparing images.  that's tough.

this is an interesting case where the easily testable approach isn't the easiest (or best?) to implement.

-----

when features are no longer visible, their dom elements should be deleted.

in some cases, it might make sense to keep them around, if they are just outside the visible range.


----
OTHER



// NOTE always namespace directives.  I spent an hour figuring out that <track> was buggy because it's an existing HTML tag
//      would be nice to have something that checks directives and warns about this


closing tags are important on directives



;// TODO http://codereview.stackexchange.com/
//      http://jsfiddle.net/IgorMinar/ADukg/
//      http://jsfiddle.net/pkozlowski_opensource/hzxNa/1/
