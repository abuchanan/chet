/*
TODO

overview area: shows current chromosome, with visible section highlighted
drag to pan
draggable edges for zooming
maybe scroll here triggers zoom?
problem here is that it'd be more useful to drag-select in an overview, with
drag-pan in the tracks viewer


track configuration
pluggable track type config


draw actual features


integrate twitter's bootstrap css
loading inidicators

ruler

URLs for linking to specific locations

gene info popups/hover

bug: dragging selects label text



connect to server
prefetching


search

sequence data


drag to select

reference list


onblur instead of onkeypress for ref + start + end

draggable track order

track buttons

track config panel/pop-up

actual, configurable track labels

it'd be nice if tracks were interactive, e.g. when i hover over a coverage histogram,
it displays the Y-axis value at that X.  This interactivity could conflict with
dragging to pan though. if panning/zooming interaction was confined to an overview track?

feature editor

handle empty

window size detection and response

dragging the offset so that elements are added/removed from the screen changes the height of the viewer.
ok, but might have effects on UX.  try to keep the viewer a reasonable height.
could also make the features jump around as the packing is changed.

if there are no features, container collapses to zero.  should be a min height

groups of isoforms.  probably handled already




zoom, or rather visible range: rough draft done

feature packing: rough draft done, needs extensive testing

multiple tracks: rough draft done

multiple chromosomes: rough draft done

drag to pan: rough, needs testing

multiple data sources: data source is inherent to URL

histogram (coverage) track: rough draft done
*/

----

when displaying a feature, the feature should not be drawn outside the bounds of the viewer.  same for end.

configure a condition where this happens:
- a feature
- a viewer

a good solution for this is CSS "overflow: hidden", which means this needs to be tested
at the browser level, with some way to perceive that it, in fact, doesn't show the overflowing feature.  sounds like comparing images.  that's tough.

this is an interesting case where the easily testable approach isn't the easiest (or best?) to implement.

-----

when features are no longer visible, their dom elements should be deleted.

in some cases, it might make sense to keep them around, if they are just outside the visible range.
